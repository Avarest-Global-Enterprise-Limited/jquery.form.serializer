// Generated by CoffeeScript 1.7.1
(function() {
  describe('$.fn.getSerializedForm.Serializer', function() {
    describe('constructor($this)', function() {
      return it('should save the element as an instance variable', function() {
        var $this, serializer;
        $this = $();
        serializer = new $.fn.getSerializedForm.Serializer($this);
        return expect(serializer.$this).to.eq($this);
      });
    });
    describe('.serializeField(name, value)', function() {
      beforeEach(function() {
        return this.serializer = new $.fn.getSerializedForm.Serializer;
      });
      context('if the name is a simple field name', function() {
        return it('should return a plain value', function() {
          var value;
          value = this.serializer.serializeField('email', 'test@email.com');
          return expect(value).to.eql({
            email: 'test@email.com'
          });
        });
      });
      context('if the name is an array field name', function() {
        context('the key', function() {
          return it('should not contain the brackets', function() {
            var value;
            value = this.serializer.serializeField('emails[]', 'test@email.com');
            return expect(value).to.have.key('emails');
          });
        });
        return it('should return an array', function() {
          var value;
          value = this.serializer.serializeField('emails[]', 'test@email.com');
          return expect(value).to.eql({
            emails: ['test@email.com']
          });
        });
      });
      return context('if the name is a named array field name', function() {
        context('the key', function() {
          return it('should not contain the brackets', function() {
            var value;
            value = this.serializer.serializeField('emails[john]', 'john@email.com');
            return expect(value).to.have.key('emails');
          });
        });
        return it('should return a json object', function() {
          var value;
          value = this.serializer.serializeField('emails[john]', 'john@email.com');
          return expect(value).to.eql({
            emails: {
              john: 'john@email.com'
            }
          });
        });
      });
    });
    return describe('.getSubmittableFieldValues()', function() {
      beforeEach(function() {
        var $form;
        $form = $("<form action=\"/\">\n  <input type=\"text\" name=\"simple_field\" value=\"simple_value\" />\n  <input type=\"text\" name=\"array_field[]\" value=\"array_value1\" />\n  <input type=\"text\" name=\"array_field[]\" value=\"array_value2\" />\n  <input type=\"text\" name=\"named_field[named1]\" value=\"named_value1\" />\n  <input type=\"text\" name=\"named_field[named2]\" value=\"named_value2\" />\n</form>");
        return this.serializer = new $.fn.getSerializedForm.Serializer($form);
      });
      return it('should return all submittable fields as a key, value pairs array', function() {
        var fields;
        fields = this.serializer.getSubmittableFieldValues();
        return expect(fields).to.eql([["simple_field", "simple_value"], ["array_field[]", "array_value1"], ["array_field[]", "array_value2"], ["named_field[named1]", "named_value1"], ["named_field[named2]", "named_value2"]]);
      });
    });
  });

}).call(this);
