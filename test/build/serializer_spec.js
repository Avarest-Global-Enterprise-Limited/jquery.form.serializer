// Generated by CoffeeScript 1.7.1
(function() {
  describe('$.fn.getSerializedForm.Serializer', function() {
    beforeEach(function() {
      this.sandbox = sinon.sandbox.create();
      return this.$form = $("<form>\n  <input type=\"hidden\" name=\"token\" value=\"ABC\" />\n  <input type=\"text\" name=\"user[name]\" value=\"John Doe\" />\n  <input type=\"text\" name=\"user[email]\" value=\"john@email.com\" />\n  <select name=\"user[country]\">\n    <option value=\"CL\" selected>Chile</option>\n  </select>\n  <input type=\"radio\" name=\"user[gender]\" value=\"male\" checked />\n  <input type=\"radio\" name=\"user[gender]\" value=\"female\" />\n  <input type=\"checkbox\" name=\"user[skills][]\" value=\"JS\" checked />\n  <input type=\"checkbox\" name=\"user[skills][]\" value=\"C++\" />\n  <input type=\"checkbox\" name=\"user[skills][]\" value=\"Java\" />\n  <input type=\"checkbox\" name=\"user[skills][]\" value=\"CSS\" checked />\n</form>");
    });
    afterEach(function() {
      return this.sandbox.restore();
    });
    describe('constructor($this)', function() {
      return it('should save the element as an instance variable', function() {
        var $this, serializer;
        $this = $();
        serializer = new $.fn.getSerializedForm.Serializer($this);
        return expect(serializer.$this).to.eq($this);
      });
    });
    describe('.serializeField(name, value)', function() {
      beforeEach(function() {
        return this.serializer = new $.fn.getSerializedForm.Serializer;
      });
      context('if the name is a simple field name', function() {
        return it('should return a plain value', function() {
          var value;
          value = this.serializer.serializeField('email', 'test@email.com');
          return expect(value).to.eql({
            email: 'test@email.com'
          });
        });
      });
      context('if the name is an array field name', function() {
        context('the key', function() {
          return it('should not contain the brackets', function() {
            var value;
            value = this.serializer.serializeField('emails[]', 'test@email.com');
            return expect(value).to.have.key('emails');
          });
        });
        it('should return an array', function() {
          var value;
          value = this.serializer.serializeField('emails[]', 'test@email.com');
          return expect(value).to.eql({
            emails: ['test@email.com']
          });
        });
        return it('should merge consecutive calls to the same array field', function() {
          var value;
          this.serializer.serializeField('emails[]', 'test1@email.com');
          value = this.serializer.serializeField('emails[]', 'test2@email.com');
          return expect(value).to.eql({
            emails: ['test1@email.com', 'test2@email.com']
          });
        });
      });
      return context('if the name is a named array field name', function() {
        context('the key', function() {
          return it('should not contain the brackets', function() {
            var value;
            value = this.serializer.serializeField('emails[john]', 'john@email.com');
            return expect(value).to.have.key('emails');
          });
        });
        it('should return a json object', function() {
          var value;
          value = this.serializer.serializeField('emails[john]', 'john@email.com');
          return expect(value).to.eql({
            emails: {
              john: 'john@email.com'
            }
          });
        });
        return it('should handle nested attributes', function() {
          var value;
          value = this.serializer.serializeField('emails[john][current]', 'john@email.com');
          return expect(value).to.eql({
            emails: {
              john: {
                current: 'john@email.com'
              }
            }
          });
        });
      });
    });
    describe('.getSubmittableFieldValues(options)', function() {
      beforeEach(function() {
        return this.serializer = new $.fn.getSerializedForm.Serializer(this.$form);
      });
      it('should return all submittable fields as a key, value pairs array', function() {
        var fields;
        fields = this.serializer.getSubmittableFieldValues();
        return expect(fields).to.eql([["token", "ABC"], ["user[name]", "John Doe"], ["user[email]", "john@email.com"], ["user[country]", "CL"], ["user[gender]", "male"], ["user[skills][]", "JS"], ["user[skills][]", "CSS"]]);
      });
      it('should ignore fields without a name', function() {
        var fields;
        this.$form.html("<input type=\"text\" name=\"test\" value=\"valid\" />\n<input type=\"text\" value=\"invalid\" />");
        fields = this.serializer.getSubmittableFieldValues();
        return expect(fields).to.eql([["test", "valid"]]);
      });
      return it('should be customizable by passing options', function() {
        var fields;
        this.$form.html("<input type=\"text\" name=\"test1\" value=\"enabled\" />\n<input type=\"text\" name=\"test2\" value=\"disabled\" disabled />");
        fields = this.serializer.getSubmittableFieldValues({
          submittable: {
            filters: {
              enabled: false
            }
          }
        });
        return expect(fields).to.eql([["test1", "enabled"], ["test2", "disabled"]]);
      });
    });
    return describe('.serialize(options = {})', function() {
      beforeEach(function() {
        return this.serializer = new $.fn.getSerializedForm.Serializer(this.$form);
      });
      it('should return a json with all the submittable field values serialized', function() {
        return expect(this.serializer.serialize()).to.eql({
          token: 'ABC',
          user: {
            name: "John Doe",
            email: "john@email.com",
            country: "CL",
            gender: "male",
            skills: ["JS", "CSS"]
          }
        });
      });
      return it('should pass the options to getSubmittableFieldValues', function() {
        var options;
        this.sandbox.spy($.fn.getSerializedForm.Serializer.prototype, "getSubmittableFieldValues");
        options = {
          option1: 1
        };
        this.serializer.serialize(options);
        return expect($.fn.getSerializedForm.Serializer.prototype.getSubmittableFieldValues).to.have.been.calledWith(options);
      });
    });
  });

}).call(this);
