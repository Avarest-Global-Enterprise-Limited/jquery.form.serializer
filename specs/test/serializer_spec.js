// Generated by CoffeeScript 1.7.1
(function() {
  describe('$._jQueryFormSerializer.Serializer', function() {
    beforeEach(function() {
      this.sandbox = sinon.sandbox.create();
      return this.$form = $("<form>\n  <input type=\"hidden\" name=\"token\" value=\"ABC\" />\n  <input type=\"text\" name=\"user[name]\" value=\"John Doe\" />\n  <input type=\"text\" name=\"user[email]\" value=\"john@email.com\" />\n  <input type=\"checkbox\" name=\"user[newsletter]\" checked />\n  <input type=\"file\" name=\"user[image]\" value=\"../dummy/image.png\" />\n  <select name=\"user[country]\">\n    <option value=\"CL\" selected>Chile</option>\n  </select>\n  <input type=\"radio\" name=\"user[gender]\" value=\"male\" checked />\n  <input type=\"radio\" name=\"user[gender]\" value=\"female\" />\n  <input type=\"checkbox\" name=\"user[skills][]\" value=\"JS\" checked />\n  <input type=\"checkbox\" name=\"user[skills][]\" value=\"C++\" />\n  <input type=\"checkbox\" name=\"user[skills][]\" value=\"Java\" />\n  <input type=\"checkbox\" name=\"user[skills][]\" value=\"CSS\" checked />\n  <input type=\"button\" name=\"my-submit\" value=\"Submit Form\" />\n</form>");
    });
    afterEach(function() {
      return this.sandbox.restore();
    });
    describe('constructor($this)', function() {
      return it('should save the element as an instance variable', function() {
        var $this, serializer;
        $this = $();
        serializer = new $._jQueryFormSerializer.Serializer($this);
        return expect(serializer.$this).to.eq($this);
      });
    });
    describe('._serializeField(name, value)', function() {
      beforeEach(function() {
        return this.serializer = new $._jQueryFormSerializer.Serializer;
      });
      context('if the name is a simple field name', function() {
        return it('should return a plain value', function() {
          var value;
          value = this.serializer._serializeField('email', 'test@email.com');
          return expect(value).to.eql({
            email: 'test@email.com'
          });
        });
      });
      context('if the name is an array field name', function() {
        context('the key', function() {
          return it('should not contain the brackets', function() {
            var value;
            value = this.serializer._serializeField('emails[]', 'test@email.com');
            return expect(value).to.have.key('emails');
          });
        });
        it('should return an array', function() {
          var value;
          value = this.serializer._serializeField('emails[]', 'test@email.com');
          return expect(value).to.eql({
            emails: ['test@email.com']
          });
        });
        return it('should merge consecutive calls to the same array field', function() {
          var value;
          this.serializer._serializeField('emails[]', 'test1@email.com');
          value = this.serializer._serializeField('emails[]', 'test2@email.com');
          return expect(value).to.eql({
            emails: ['test1@email.com', 'test2@email.com']
          });
        });
      });
      return context('if the name is a named array field name', function() {
        context('the key', function() {
          return it('should not contain the brackets', function() {
            var value;
            value = this.serializer._serializeField('emails[john]', 'john@email.com');
            return expect(value).to.have.key('emails');
          });
        });
        it('should return a json object', function() {
          var value;
          value = this.serializer._serializeField('emails[john]', 'john@email.com');
          return expect(value).to.eql({
            emails: {
              john: 'john@email.com'
            }
          });
        });
        return it('should handle nested attributes', function() {
          var value;
          value = this.serializer._serializeField('emails[john][current]', 'john@email.com');
          return expect(value).to.eql({
            emails: {
              john: {
                current: 'john@email.com'
              }
            }
          });
        });
      });
    });
    describe('._getSubmittableFieldValues(options)', function() {
      beforeEach(function() {
        return this.serializer = new $._jQueryFormSerializer.Serializer(this.$form);
      });
      it('should return all submittable fields as a name, value json array', function() {
        var fields;
        fields = this.serializer._getSubmittableFieldValues();
        return expect(fields).to.eql([
          {
            name: "token",
            value: "ABC"
          }, {
            name: "user[name]",
            value: "John Doe"
          }, {
            name: "user[email]",
            value: "john@email.com"
          }, {
            name: "user[newsletter]",
            value: true
          }, {
            name: "user[country]",
            value: "CL"
          }, {
            name: "user[gender]",
            value: "male"
          }, {
            name: "user[skills][]",
            value: "JS"
          }, {
            name: "user[skills][]",
            value: "CSS"
          }
        ]);
      });
      it('should ignore fields without a name', function() {
        var fields;
        this.$form.html("<input type=\"text\" name=\"test\" value=\"valid\" />\n<input type=\"text\" value=\"invalid\" />");
        fields = this.serializer._getSubmittableFieldValues();
        return expect(fields).to.eql([
          {
            name: "test",
            value: "valid"
          }
        ]);
      });
      it('should be customizable by passing options', function() {
        var fields;
        this.$form.html("<input type=\"text\" name=\"test1\" value=\"enabled\" />\n<input type=\"text\" name=\"test2\" value=\"disabled\" disabled />");
        fields = this.serializer._getSubmittableFieldValues({
          filters: {
            enabledOnly: false
          }
        });
        return expect(fields).to.eql([
          {
            name: "test1",
            value: "enabled"
          }, {
            name: "test2",
            value: "disabled"
          }
        ]);
      });
      context('working with custom controls', function() {
        beforeEach(function() {
          return $.valHooks.custom_control = {
            get: function(el) {
              return $(el).data("value");
            }
          };
        });
        afterEach(function() {
          return delete $.valHooks.custom_control;
        });
        return it('should work with custom control types', function() {
          var $control, fields;
          $control = $("<div class=\"custom-control\" name=\"custom\"/>");
          $control.data({
            "value": "my value"
          });
          $control.get(0).type = "custom_control";
          this.$form.html($control);
          fields = this.serializer._getSubmittableFieldValues({
            submittable: "" + $.jQueryFormSerializer.submittable.selector + ", .custom-control"
          });
          return expect(fields).to.eql([
            {
              name: "custom",
              value: "my value"
            }
          ]);
        });
      });
      it('should call value castings on every field', function() {
        var fields;
        this.$form.html("<input type=\"text\" value=\"123\" name=\"field1\" class=\"numeric\" />\n<input type=\"text\" value=\"123\" name=\"field2\" />");
        fields = this.serializer._getSubmittableFieldValues({
          castings: {
            numericFields: function() {
              if ($(this).hasClass("numeric")) {
                return parseInt($(this).val());
              }
            }
          }
        });
        return expect(fields).to.eql([
          {
            name: "field1",
            value: 123
          }, {
            name: "field2",
            value: "123"
          }
        ]);
      });
      return it('should allow to customize castings by passing options', function() {
        var fields;
        this.$form.html("<input type=\"checkbox\" name=\"test\" checked />");
        fields = this.serializer._getSubmittableFieldValues({
          castings: {
            booleanCheckbox: false
          }
        });
        return expect(fields).to.eql([
          {
            name: "test",
            value: "on"
          }
        ]);
      });
    });
    return describe('.toJSON(options = {})', function() {
      beforeEach(function() {
        return this.serializer = new $._jQueryFormSerializer.Serializer(this.$form);
      });
      it('should return a json with all the submittable field values serialized', function() {
        return expect(this.serializer.toJSON()).to.eql({
          token: 'ABC',
          user: {
            name: "John Doe",
            email: "john@email.com",
            newsletter: true,
            country: "CL",
            gender: "male",
            skills: ["JS", "CSS"]
          }
        });
      });
      return it('should pass the options to _getSubmittableFieldValues', function() {
        var options;
        this.sandbox.spy($._jQueryFormSerializer.Serializer.prototype, "_getSubmittableFieldValues");
        options = {
          option1: 1
        };
        this.serializer.toJSON(options);
        return expect($._jQueryFormSerializer.Serializer.prototype._getSubmittableFieldValues).to.have.been.calledWith(options);
      });
    });
  });

}).call(this);
